{% load projects_tags %}


###########################################################################
#          auto-created readthedocs.org specific configuration            #
###########################################################################


#
# The following code was added during an automated build on readthedocs.org
# It is auto created and injected for every build. The result is based on the
# conf.py.tmpl file found in the readthedocs.org codebase:
# https://github.com/rtfd/readthedocs.org/blob/master/readthedocs/doc_builder/templates/doc_builder/conf.py.tmpl
#


import importlib
import sys
import os.path
from six import string_types

from sphinx import version_info

# Get suffix for proper linking to GitHub
# This is deprecated in Sphinx 1.3+,
# as each page can have its own suffix
if globals().get('source_suffix', False):
    if isinstance(source_suffix, string_types):
        SUFFIX = source_suffix
    else:
        SUFFIX = source_suffix[0]
else:
    SUFFIX = '.rst'

# Add RTD Static Path. Add to the end because it overwrites previous files.
if not 'html_static_path' in globals():
    html_static_path = []
if os.path.exists('_static'):
    html_static_path.append('_static')
html_static_path.append('{{ static_path }}')

# Add RTD Theme only if they aren't overriding it already
using_rtd_theme = (
    (
        'html_theme' in globals() and
        html_theme in ['default'] and
        # Allow people to bail with a hack of having an html_style
        'html_style' not in globals()
    ) or 'html_theme' not in globals()
)
if using_rtd_theme:
    theme = importlib.import_module('{{ html_theme_import }}')
    html_theme = '{{ html_theme }}'
    html_style = None
    html_theme_options = {}
    if 'html_theme_path' in globals():
        html_theme_path.append(theme.get_html_theme_path())
    else:
        html_theme_path = [theme.get_html_theme_path()]

if globals().get('websupport2_base_url', False):
    websupport2_base_url = '{{ api_host }}/websupport'
    websupport2_static_url = '{{ settings.STATIC_URL }}'


#Add project information to the template context.
context = {
    'using_theme': using_rtd_theme,
    'html_theme': html_theme,
    'current_version': "{{ version.verbose_name }}",
    'version_slug': "{{ version.slug }}",
    'MEDIA_URL': "{{ settings.MEDIA_URL }}",
    'STATIC_URL': "{{ settings.STATIC_URL }}",
    'PRODUCTION_DOMAIN': "{{ settings.PRODUCTION_DOMAIN }}",
    'versions': [{% for version in versions %}
    ("{{ version.slug }}", "/{{ version.project.language }}/{{ version.slug}}/"),{% endfor %}
    ],
    'downloads': [ {% for key, val in downloads.items %}
    ("{{ key }}", "{{ val }}"),{% endfor %}
    ],
    'subprojects': [ {% for slug, url in project.get_subproject_urls %}
        ("{{ slug }}", "{{ url }}"),{% endfor %}
    ],
    'slug': '{{ project.slug }}',
    'name': u'{{ project.name }}',
    'rtd_language': u'{{ project.language }}',
    'programming_language': u'{{ project.programming_language }}',
    'canonical_url': '{{ project.get_canonical_url }}',
    'analytics_code': '{{ project.analytics_code }}',
    'single_version': {{ project.single_version }},
    'conf_py_path': '{{ conf_py_path }}',
    'api_host': '{{ api_host }}',
    'github_user': '{{ github_user }}',
    'github_repo': '{{ github_repo }}',
    'github_version': '{{ github_version }}',
    'display_github': {{ display_github }},
    'bitbucket_user': '{{ bitbucket_user }}',
    'bitbucket_repo': '{{ bitbucket_repo }}',
    'bitbucket_version': '{{ bitbucket_version }}',
    'display_bitbucket': {{ display_bitbucket }},
    'gitlab_user': '{{ gitlab_user }}',
    'gitlab_repo': '{{ gitlab_repo }}',
    'gitlab_version': '{{ gitlab_version }}',
    'display_gitlab': {{ display_gitlab }},
    'READTHEDOCS': True,
    'using_theme': (html_theme == "default"),
    'new_theme': (html_theme == "sphinx_rtd_theme"),
    'source_suffix': SUFFIX,
    'ad_free': {% if project.show_advertising %}False{% else %}True{% endif %},
    'user_analytics_code': '{{ project.analytics_code|default_if_none:'' }}',
    'global_analytics_code': '{{ settings.GLOBAL_ANALYTICS_CODE }}',
    'commit': {% if project.repo_type == 'git' %}'{{ commit|slice:"8" }}'{% else %}'{{ commit }}'{% endif %},
}

{# Provide block for extending context data from child template #}
{% block extra_context %}{% endblock %}

if 'html_context' in globals():
    {% if dont_overwrite_sphinx_context %}
    for key in context:
        if key not in html_context:
            html_context[key] = context[key]
    {% else %}
    html_context.update(context)
    {% endif %}
else:
    html_context = context

# Add custom RTD extension
if 'extensions' in globals():
    # Insert at the beginning because it can interfere
    # with other extensions.
    # See https://github.com/rtfd/readthedocs.org/pull/4054
    extensions.insert(0, "readthedocs_ext.readthedocs")
else:
    extensions = ["readthedocs_ext.readthedocs"]

# ===================================================================
# Michael's edits
# ===================================================================
def write_if_changed(fname, contents):
    
    try:
        with open(fname, 'r') as fp:
            old_contents = fp.read()
    except:
        old_contents = ''
        
    if old_contents != contents:
        with open(fname, 'w') as fp:
            fp.write(contents)

def generate_sidebar(conf, conf_api):
    
    # determine 'latest' or 'stable'
    # if not conf.do_gen:
    do_gen = os.environ.get('SIDEBAR', None) == '1' or conf['on_rtd']
    version = conf['rtd_version']
    
    lines = [
        '', '.. DO NOT MODIFY! THIS PAGE IS AUTOGENERATED!', ''
    ]

    def toctree(name, depth):
        lines.extend(['.. toctree::',
                        '    :caption: %s' % name,
                        '    :maxdepth: %d' % depth,
                        ''])

    def endl():
        lines.append('')

    def write_item(desc, link):
        if conf_api == 'indy':
            args = desc,  link
        else:
            args = desc, 'https://indy.readthedocs.io/en/%s/%s.html' % (version, link)
            
        lines.append('    %s <%s>' % args)

    def write_subproject(project, desc, link):
        if project != conf_api:
            args = desc, project, version, link
            lines.append('    %s <https://indy.readthedocs.io/projects/%s/en/%s/%s.html>' % args)
        else:
            lines.append('    %s <%s>' % (desc, link))
    

    toctree('Hello World', 2)
    write_item('Introduction', 'index')

    toctree('Repositories', 2)
    write_subproject('sdk', 'SDK', 'index')
    write_subproject('node', 'Node', 'index')
    write_subproject('agent', 'Agent', 'index')
    write_subproject('plenum', 'Plenum', 'index')
    write_subproject('hipe', 'Hipe', 'index')

    endl()

    write_if_changed('toc.rst', '\n'.join(lines))


rtd_version = os.environ.get('READTHEDOCS_VERSION', 'latest')
if rtd_version not in ['stable', 'latest']:
    rtd_version = 'latest'
try:
    generate_sidebar(globals(), nickname)
    intersphinx_mapping =  {
        'indy': ('http://indy.readthedocs.io/en/%s/' % rtd_version, None),
        'indy-sdk': ('http://indy-sdk.readthedocs.io/en/%s/' % rtd_version, None),
        'indy-node': ('http://indy-node.readthedocs.io/en/%s/' % rtd_version, None),
        'indy-agent': ('http://indy-agent.readthedocs.io/en/%s' % rtd_version, None),
        'indy-plenum': ('http://indy-plenum.readthedocs.io/en/%s' % rtd_version, None),
        'indy-hipe': ('http://hipe.readthedocs.io/en/%s' % rtd_version, None),
    }
    master_doc = "toc"

except:
    e = sys.exc_info()[0]
    print e